import tracemalloc

tracemalloc.start()

import statsmodels.api as sm
import pandas as pd
import sys
import pickle

from django.shortcuts import render, redirect
from django.contrib import messages
from pathlib import Path
from django.template import loader
from django.http import HttpResponse

#sys.path.append('/home/humbulani/refactored_pd')
sys.path.append('/home/humbulani/New/django_project/refactored_pd')

from .forms import Inputs, Side

sys.path.append('/home/humbulani/New/django_project/PD')

from django.templatetags.static import static

import Model_Perf
import pandas as pd
import numpy as np
import train_test
import GLM_Bino
import matplotlib.pyplot as plt
import Diagnostics
import io
import base64

#from django.templatetags.static import static

from class_traintest import OneHotEncoding
from class_base import Base
from pd_download import data_cleaning
from class_missing_values import ImputationCat
import class_diagnostics

with open('/home/humbulani/New/django_project/deploy/glm_binomial.pkl','rb') as file:
        loaded_model = pickle.load(file)

# Performance measures

def roc(request):

    # #g, ax = plt.subplots(figsize=(3,4))

    # f = Diagnostics.Normal_Residual_Test(GLM_Bino.GLM_Binomial_fit, train_test.X_test, train_test.Y_test, train_test.X_train\
    #                                       ,train_test.Y_train)
                                         
    # # f = Model_Perf.ROC_Curve_Analytics(ax,GLM_Bino.GLM_Binomial_fit, train_test.X_test, train_test.Y_test, train_test.X_train\
    # #                                        ,train_test.Y_train)[1][0]                              

    return render (request, 'roc.html')

def confusion_logistic(request):

     return render (request, 'confusion_logistic.html')

# Model Diagnostics

def image_generator(func_plot):

     = ResidualsPlot(custom_rcParams, func, x_test, y_test, x_train, y_train, threshold)
    c = b.plot_quantile_residuals()

    f = Diagnostics.func_plot(GLM_Bino.GLM_Binomial_fit, train_test.Y_train.values.reshape(-1,1)\
              ,train_test.X_train, train_test.X_test, train_test.Y_test, threshold=0.8)

    buffer = io.BytesIO()
    f.savefig(buffer, format='png')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    buffer.close()

def normal_plot(request, func_plot):

    image_generator(func_plot)

    return render (request, 'residuals.html', {'image_base64':image_base64})

    #return render (request, 'normal_plot.html')

def residuals(request):

    f = Diagnostics.Plot_Residuals(GLM_Bino.GLM_Binomial_fit, train_test.Y_train.values.reshape(-1,1)\
              ,train_test.X_train, train_test.X_test, train_test.Y_test, threshold=0.8)

    buffer = io.BytesIO()
    f.savefig(buffer, format='png')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    buffer.close()

    # response = f'<img src="data:image/png;base64,{image_base64}">'

    # return HttpResponse(response)

    # response = HttpResponse(buffer.read(), content_type='image/png')
    # response['Content-Disposition'] = 'attachment; filename="residual_plot.png"'

    return render (request, 'residuals.html', {'image_base64':image_base64})

    #buffer.close()

def partial(request):

     return render (request, 'partial.html')

def student(request):

     return render (request, 'student.html')

def cooks(request):

     return render (request, 'cooks.html')



def home(request):

    return render(request, 'newhome.html')

def inputs(request):

    global AGE, TITLE, list_1, answer
    AGE = 8
    TITLE = 6
    list_=[]
    answer=''


    if request.method == 'POST':
        form = Inputs(request.POST)
        side_bar = Side(request.POST)
        if form.is_valid():

            # Float features
            
            NAME = form.cleaned_data.get("NAME")
            AGE = form.cleaned_data.get("AGE")
            CHILDREN = form.cleaned_data.get("CHILDREN")
            PERS_H = form.cleaned_data.get("PERS_H")
            TMADD = form.cleaned_data.get("TMADD")
            TMJOB1 = form.cleaned_data.get("TMJOB1")
            TEL = form.cleaned_data.get("TEL")
            NMBLOAN = form.cleaned_data.get("NMBLOAN")
            FINLOAN = form.cleaned_data.get("FINLOAN")
            INCOME = form.cleaned_data.get("INCOME")
            EC_CARD = form.cleaned_data.get("EC_CARD")
            INC = form.cleaned_data.get("INC")
            INC1 = form.cleaned_data.get("INC1")
            BUREAU = form.cleaned_data.get("BUREAU")
            LOCATION = form.cleaned_data.get("LOCATION")
            LOANS = form.cleaned_data.get("LOANS")
            REGN = form.cleaned_data.get("REGN")
            DIV = form.cleaned_data.get("DIV")
            CASH = form.cleaned_data.get("CASH")
            
            
            # Categorical features
            # 
            TITLE = form.cleaned_data.get("TITLE")
            H = 0
            if TITLE == 'H':
                H=1
                # list_.append(H)
            else:
                H=0
                # list_.append(H)
            #input_ = [H]
            #
            STATUS = form.cleaned_data.get("STATUS")

            V, U, G, E, T = 0,0,0,0,0    

            if STATUS == 'V':
                V=1
            elif STATUS == 'U':
                U=1
            elif STATUS == 'G':
                G=1
            elif STATUS == 'E':
                E=1
            elif STATUS=='T':
                T=1
            else:
                V, U, G, E, T = 0,0,0,0,0  

            PRODUCT = form.cleaned_data.get("PRODUCT") 

            Furniture_Carpet, Dept_Store_Mail, Leisure,Cars, OT = 0,0,0,0,0    

            if PRODUCT=='Furniture_Carpet':
                Furniture_Carpet=1
            elif PRODUCT=='Dept_Store_Mail':
                Dept_Store_Mail=1
            elif PRODUCT=='Leisure':
                Leisure=1
            elif PRODUCT=='Cars':
                Cars=1
            elif PRODUCT=='OT':
                OT=1
            else:
                Furniture_Carpet, Dept_Store_Mail, Leisure,Cars, OT = 0,0,0,0,0   

            RESID = form.cleaned_data.get("RESID")

            Lease = 0    

            if RESID=='Lease':
                Lease=1    

            else:
                Lease=0

            NAT = form.cleaned_data.get("NAT")

            German, Turkish, RS, Greek ,Italian, Other_European, Spanish_Portugue = 0,0,0,0,0,0,0    

            if NAT=='German':
                German=1
            elif NAT=='Turkish':
                Turkish=1        
            elif NAT=='RS':
                RS=1
            elif NAT=='Greek':
                Greek=1
            elif NAT=='Italian':
                Italian=1
            elif NAT=='Other_European':
                Other_European=1
            elif NAT=='Spanish_Portugue':
                Spanish_Portugue=1
            else:
                German, Turkish, RS, Greek ,Italian, Other_European, Spanish_Portugue = 0,0,0,0,0,0,0 

            PROF = form.cleaned_data.get("PROF")  

            Others, Civil_Service_M , Self_employed_pe, Food_Building_Ca, Chemical_Industr\
            ,Pensioner ,Sea_Vojage_Gast, Military_Service = 0,0,0,0,0,0,0,0    

            if PROF=='Others':
                Others=1
            elif PROF=='Civil_Service_M':
                Civil_Service_M=1
            elif PROF=='Self_employed_pe':
                Self_employed_pe=1
            elif PROF=='Food_Building_Ca':
                Food_Building_Ca=1
            elif PROF=='Chemical_Industr':
                Chemical_Industr=1
            elif PROF=='Pensioner':
                Pensioner=1
            elif PROF=='Sea_Vojage_Gast':
                Sea_Vojage_Gast=1
            elif PROF=='Military_Service':
                Military_Service=1
            else:
                Others, Civil_Service_M , Self_employed_pe, Food_Building_Ca, Chemical_Industr\
                ,Pensioner ,Sea_Vojage_Gast, Military_Service = 0,0,0,0,0,0,0,0 

            CAR = form.cleaned_data.get("CAR")   

            Car,Car_and_Motor_bi= 0,0    

            if CAR=='Car':
                Car=1
            elif CAR=='Car_and_Motor_bi':
                Car_and_Motor_bi=1
            else:
                Car,Car_and_Motor_bi= 0,0    

            no_credit_cards, Mastercard_Euroc, VISA_mybank,VISA_Others\
            ,Other_credit_car, American_Express = 0,0,0,0,0,0  

            CARDS = form.cleaned_data.get("CARDS")  

            if CARDS=='no_credit_cards':
                no_credit_cards=1
            elif CARDS=='Mastercard_Euroc':
                Mastercard_Euroc=1
            elif CARDS == 'VISA_mybank':
                VISA_mybank=1
            elif CARDS=='VISA_Others':
                VISA_Others=1
            elif CARDS=='Other_credit_car':
                Other_credit_car=1
            elif CARDS=='American_Express':
                American_Express=1
            else:
                no_credit_cards, Mastercard_Euroc, VISA_mybank,VISA_Others\
                ,Other_credit_car, American_Express = 0,0,0,0,0,0  



            inputs1 = [H,V, U, G, E, T,Furniture_Carpet, Dept_Store_Mail, Leisure,Cars, OT,Lease,German, Turkish, RS, Greek ,Italian\
             , Other_European, Spanish_Portugue,Others, Civil_Service_M , Self_employed_pe, Food_Building_Ca, Chemical_Industr\
             , Pensioner ,Sea_Vojage_Gast, Military_Service,Car,Car_and_Motor_bi,no_credit_cards, Mastercard_Euroc, VISA_mybank,VISA_Others\
             , Other_credit_car, American_Express]
            
            inputs2 = [CHILDREN, PERS_H, AGE, TMADD, TMJOB1, TEL, NMBLOAN, FINLOAN, INCOME, EC_CARD, INC, INC1, BUREAU, LOCATION, LOANS\
             , REGN, DIV, CASH]    

            list_ = inputs2 + inputs1

            inputs = np.array(list_)
            inputs = sm.add_constant(inputs)  
            
            answer = loaded_model.predict(inputs).round(2)   


            #return redirect('deployment') 

    else:

        form = Inputs()
        side_bar = Side()

    return render(request, 'features.html', {'form':form,'side_bar':side_bar,'answer':answer})

print(tracemalloc.get_traced_memory())

tracemalloc.stop()
